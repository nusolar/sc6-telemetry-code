// Generated by CoffeeScript 1.6.3
(function() {
  var BatteryBox, Button, Camera, CenterPanel, CentralRow, Drive, LeftPanel, Map, RightPanel, namespace,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };

  namespace('Model', function(exports) {
    var k, v, _ref, _results;
    exports.serial_devices = {
      horn: "/dev/ttyACM.horn",
      left: "/dev/ttyACM.left",
      right: "/dev/ttyACM.right",
      headlights: "/dev/ttyACM.headlights",
      brakelights: "/dev/ttyACM.brakelights"
    };
    exports.UsbSerial = (function() {
      UsbSerial.prototype._value = 0;

      UsbSerial.prototype.value = function() {
        return _value;
      };

      UsbSerial.prototype.ab2str = function(buff) {
        return String.fromCharCode.apply(null, new UInt8Array(buff));
      };

      UsbSerial.prototype.str2ab = function(str) {
        var buf, bufView, i, _i, _ref, _results;
        buf = new ArrayBuffer(str.length);
        bufView = new UInt8Array(buf);
        _results = [];
        for (i = _i = 0, _ref = str.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(bufView[i] = str.charCodeAt(i));
        }
        return _results;
      };

      UsbSerial.prototype.write = function(str, call) {
        if (call == null) {
          call = function() {};
        }
        return chrome.serial.write(this.connection_id, str2ab(str), call);
      };

      UsbSerial.prototype.off = function() {
        return this.write("off", function() {
          var _value;
          return _value = 0;
        });
      };

      UsbSerial.prototype.on = function() {
        return this.write("on", function() {
          var _value;
          return _value = 1;
        });
      };

      UsbSerial.prototype.toggle = function() {
        var _value;
        return _value = !_value;
      };

      function UsbSerial(name) {
        this.name = name;
        chrome.serial.open(this.name, {
          bitrate: 115200
        }, function(connection_info) {
          this.connection_id = connection_info.connectionId;
          return console.log("Serial port opened: " + this.name);
        });
      }

      UsbSerial.prototype.destroy = function() {
        return chrome.serial.close(this.connection_id, function() {
          return console.log("Serial port closed: " + this.name);
        });
      };

      return UsbSerial;

    })();
    exports.usb = new Object();
    _ref = exports.serial_devices;
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      _results.push(exports.usb[k] = new exports.UsbSerial(v));
    }
    return _results;
  });

  Button = (function(_super) {
    __extends(Button, _super);

    Button.Controller = (function() {
      function Controller(click) {
        this.click = click;
      }

      Controller.prototype['mousedown &'] = function() {
        this.view.$().css('background-color', 'blue');
        return this.controller.click(true);
      };

      Controller.prototype['mouseup &'] = function() {
        this.view.$().css('background-color', '');
        return this.controller.click(false);
      };

      Controller.prototype['mouseout &'] = function() {
        return this.controller['mouseup &']();
      };

      return Controller;

    })();

    function Button(title, click) {
      var model, view;
      if (click == null) {
        click = function() {
          return true;
        };
      }
      model = {
        text: title
      };
      view = $('#button_template').html();
      return $$(model, view, new Button.Controller(click));
    }

    return Button;

  })($$);

  LeftPanel = (function(_super) {
    __extends(LeftPanel, _super);

    LeftPanel.Controller = (function() {
      function Controller() {}

      Controller.prototype['create'] = function() {
        var haz, left, rev;
        this.append(left = new Button("LEFT"));
        this.append(haz = new Button("HAZARDS"));
        return this.append(rev = new Button("REVERSE"));
      };

      return Controller;

    })();

    function LeftPanel() {
      var view;
      view = $('#left_template').html();
      return $$({}, view, new LeftPanel.Controller());
    }

    return LeftPanel;

  })($$);

  RightPanel = (function(_super) {
    __extends(RightPanel, _super);

    RightPanel.Controller = (function() {
      function Controller() {}

      Controller.prototype['create'] = function() {
        var heads, horn, right;
        this.append(right = new Button("RIGHT"));
        this.append(heads = new Button("HEADLIGHTS"));
        return this.append(horn = new Button("HORN"));
      };

      return Controller;

    })();

    function RightPanel() {
      var view;
      view = $('#right_template').html();
      return $$({}, view, new RightPanel.Controller());
    }

    return RightPanel;

  })($$);

  BatteryBox = (function(_super) {
    __extends(BatteryBox, _super);

    BatteryBox.Controller = (function() {
      function Controller() {}

      Controller.prototype['create'] = function() {};

      return Controller;

    })();

    function BatteryBox() {
      var view;
      view = $('#battery_box_template').html();
      return $$({}, view, new BatteryBox.Controller());
    }

    return BatteryBox;

  })($$);

  Map = (function(_super) {
    __extends(Map, _super);

    Map.Controller = (function() {
      function Controller() {}

      Controller.prototype['create'] = function() {};

      return Controller;

    })();

    function Map() {
      var view;
      view = $('#map_template').html();
      return $$({}, view, new Map.Controller());
    }

    return Map;

  })($$);

  Drive = (function(_super) {
    __extends(Drive, _super);

    Drive.Controller = (function() {
      function Controller() {}

      Controller.prototype['create'] = function() {
        var start;
        this.append(start = new Button("START"));
        return start.view.$().css({
          'max-width': '20%'
        });
      };

      return Controller;

    })();

    function Drive() {
      var view;
      view = $('#drive_template').html();
      return $$({}, view, new Drive.Controller());
    }

    return Drive;

  })($$);

  Camera = (function(_super) {
    __extends(Camera, _super);

    Camera.Controller = (function() {
      function Controller() {}

      Controller.prototype['create'] = function() {};

      return Controller;

    })();

    function Camera() {
      var view;
      view = $('#camera_template').html();
      return $$({}, view, new Camera.Controller());
    }

    return Camera;

  })($$);

  CenterPanel = (function(_super) {
    __extends(CenterPanel, _super);

    CenterPanel.Controller = (function() {
      function Controller() {}

      Controller.prototype['create'] = function() {};

      return Controller;

    })();

    function CenterPanel() {
      var view;
      view = $('#central_template').html();
      return $$({}, view, new CenterPanel.Controller());
    }

    return CenterPanel;

  })($$);

  CentralRow = (function(_super) {
    __extends(CentralRow, _super);

    CentralRow.Controller = (function() {
      function Controller() {}

      Controller.prototype.panels = {};

      Controller.prototype._current_panel = null;

      Controller.prototype.show = function(state, panel) {
        var _this = this;
        if (state) {
          this.controller._current_panel.view.$().css('display', 'none');
          this.controller._current_panel = this.controller.panels[panel];
          return window.setTimeout((function() {
            return _this.controller._current_panel.view.$().css('display', 'block');
          }), 0);
        }
      };

      Controller.prototype['create'] = function() {
        var center, left, right,
          _this = this;
        center = new CenterPanel();
        center.append(this.controller.panels['map'] = new Map());
        center.append(this.controller.panels['sensors'] = new BatteryBox());
        center.append(this.controller.panels['drive'] = new Drive());
        center.append(this.controller.panels['camera'] = new Camera());
        this.controller._current_panel = this.controller.panels['sensors'];
        left = new LeftPanel();
        left.append(new Button("MAP", function(state) {
          return _this.controller.show(state, 'map');
        }));
        left.append(new Button("SENSORS", function(state) {
          return _this.controller.show(state, 'sensors');
        }));
        right = new RightPanel();
        right.append(new Button("DRIVE", function(state) {
          return _this.controller.show(state, 'drive');
        }));
        right.append(new Button("CAMERA", function(state) {
          return _this.controller.show(state, 'camera');
        }));
        this.append(left);
        this.append(center);
        return this.append(right);
      };

      return Controller;

    })();

    function CentralRow() {
      var view;
      view = $('#central_row_template').html();
      return $$({}, view, new CentralRow.Controller());
    }

    return CentralRow;

  })($$);

  $(function() {
    var body;
    window.mouse_down = false;
    document.body.onmouseup = function(e) {
      if (e.button === 0) {
        return window.mouse_down = false;
      }
    };
    document.body.onmousedown = function(e) {
      if (e.button === 0) {
        return window.mouse_down = true;
      }
    };
    body = new CentralRow();
    return $$.document.append(body, '.CentralRowWrapper');
  });

}).call(this);
